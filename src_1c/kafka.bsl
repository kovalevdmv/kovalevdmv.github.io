
Перем ЭкземплярКомпоненты Экспорт;

#Область ПолучениеСообщений
// Если используетя метод ДобавитьТопикРазделИСмещение(), для явного указания с какого раздела читать и с каким смещением
// то не надо указывать топие в этой функции (первый параметр)
// он все равно будет проигнорирован и будет использоваться более делаться настройка получения
// указанная через метод ДобавитьТопикРазделИСмещение().
// Указывать топик в функци  КонфигурацияПотребителя() есть смысл, если нужно подписаться на весь топик, со всеми разделами
// и когда не требудется указывать точно из какого раздела получать и начиная с какого смещения
Функция КонфигурацияПотребителя(Топики = "", Знач Теги = "", Таймаут = 0) Экспорт
	
	Теги = СтрРазделить(Теги, ",");

	Конфигурация = Новый Структура("Топики,Настройки,Теги,Таймаут,СписокТопиковРазделовИСмещений", СтрРазделить(Топики,","), Новый Массив, Теги ,Таймаут, Новый Массив());
	
	Возврат Конфигурация;
	
КонецФункции

Функция НачатьПолучениеСообщений(КонфиграцияПолучателя) Экспорт
	
	Если ЭкземплярКомпоненты = Неопределено Тогда
		Результат = ПодключитьКомпоненту();
		Если ЭтоОшибка(Результат) Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;	
	
	РезультатJSON = ЭкземплярКомпоненты.НачатьПолучениеСообщений(Сериализовать(КонфиграцияПолучателя));	
	
	Результат = "";
	Попытка
		Результат = Десериализовать(РезультатJSON);
	Исключение
	     Результат = СтруктураСОшибкой(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСообщение(Канал) Экспорт
	Если ЭкземплярКомпоненты = Неопределено Тогда
		Результат = ПодключитьКомпоненту();
		Если ЭтоОшибка(Результат) Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;	
	
	СообщениеJSON =  ЭкземплярКомпоненты.ПолучитьСообщение(Сериализовать(Канал));
	
	Сообщение = "";
	Попытка
		Сообщение = Десериализовать(СообщениеJSON);
	Исключение
	     Сообщение = СтруктураСОшибкой(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Сообщение;	
КонецФункции

// Если необходимо подтверждать не на основании сообщения, а отдельно
// создается отдельно параметр и передается в СохранитьСмещение()
// так же создается канал получателя (даже если нужно только подтвердить).
// Или когда неоходимо подтвердить смещение в конце чтения всех сообщений
Функция ПараметрыПодтвержденияСообщения(Канал, Топик, Раздел, Смещение) Экспорт 
	ПараметрыПодтверждения = Новый Структура("Тип,ИДКанала,Топик,Раздел,Смещение","ConfirmMessage", Канал.ИД, Топик, Раздел, Смещение);
	Возврат ПараметрыПодтверждения; 
КонецФункции

Функция СохранитьСмещение(ДанныеПодтверждения) Экспорт
	Если ЭкземплярКомпоненты = Неопределено Тогда
		Результат = ПодключитьКомпоненту();
		Если ЭтоОшибка(Результат) Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;	
	
	Если ТипЗнч(ДанныеПодтверждения) <> Тип("Структура") Тогда
		Возврат СтруктураСОшибкой("Не верный тип данных для подтверждения. Должна быть структура"); 	
	КонецЕсли;
	
	Если НЕ ДанныеПодтверждения.Свойство("Тип") Тогда
		Возврат СтруктураСОшибкой("Нет обязательного свойства ""Тип""."); 	
	КонецЕсли;
	
	Если НЕ (ДанныеПодтверждения.Тип = Тип_Сообщение() ИЛИ ДанныеПодтверждения.Тип = Тип_ПодтверждениеПолученногоСообщения()) Тогда
		Возврат СтруктураСОшибкой(СтрШаблон("Тип может содержать: [""%1""|""%2""]", Тип_Сообщение(), Тип_ПодтверждениеПолученногоСообщения()));
	КонецЕсли;
    
	ПараметрыПодтверждения = ДанныеПодтверждения;
	Если ДанныеПодтверждения.Тип = Тип_Сообщение() Тогда // если передано сообщение, создать на основании тип ConfirmMessage
		ПараметрыПодтверждения = Новый Структура("Тип,ИДКанала,Топик,Раздел,Смещение","ConfirmMessage");
		ЗаполнитьЗначенияСвойств(ПараметрыПодтверждения, ДанныеПодтверждения,,"Тип");  
	КонецЕсли;
	// ИНАЧЕ тип уже ConfirmMessage
	
	РезультатJSON =  ЭкземплярКомпоненты.СохранитьСмещение(Сериализовать(ПараметрыПодтверждения));
	
	Сообщение = "";
	Попытка
		Сообщение = Десериализовать(РезультатJSON);
	Исключение
	     Сообщение = СтруктураСОшибкой(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Сообщение;	
КонецФункции

Функция ПолучитьСписокКаналов() Экспорт
	Если ЭкземплярКомпоненты = Неопределено Тогда
		Результат = ПодключитьКомпоненту();
		Если ЭтоОшибка(Результат) Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;	
	
	КаналыJSON =  ЭкземплярКомпоненты.ПолучитьСписокКаналов("");
	
	Каналы = "";
	Попытка
		Каналы = Десериализовать(КаналыJSON);
	Исключение
	     Каналы = СтруктураСОшибкой(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Каналы;	
КонецФункции

Функция ЗакрытьКаналПотребителя(Канал) Экспорт
	Если ЭкземплярКомпоненты = Неопределено Тогда
		Результат = ПодключитьКомпоненту();
		Если ЭтоОшибка(Результат) Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ (ТипЗнч(Канал)=Тип("Структура") И Канал.Тип = Тип_Канал()) Тогда
		Возврат СтруктураСОшибкой("Не верный параметр Канал");
	КонецЕсли;
	
	РезультатJSON = ЭкземплярКомпоненты.ЗакрытьКаналПотребителя(Сериализовать(Канал));
	
	Результат = "";
	Попытка
		Результат = Десериализовать(РезультатJSON);
	Исключение
	     Результат = СтруктураСОшибкой(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции

Функция ЗакрытьВсеКаналыПотребителей() Экспорт
	Если ЭкземплярКомпоненты = Неопределено Тогда
		Результат = ПодключитьКомпоненту();
		Если ЭтоОшибка(Результат) Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;	
	
	РезультатJSON =  ЭкземплярКомпоненты.ЗакрытьВсеКаналыПотребителей("");
	
	Результат = "";
	Попытка
		Результат = Десериализовать(РезультатJSON);
	Исключение
	     Результат = СтруктураСОшибкой(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции

Функция ПингКаналПотребителя(Канал) Экспорт
	Если ЭкземплярКомпоненты = Неопределено Тогда
		Результат = ПодключитьКомпоненту();
		Если ЭтоОшибка(Результат) Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ (ТипЗнч(Канал)=Тип("Структура") И Канал.Тип = Тип_Канал()) Тогда
		Возврат СтруктураСОшибкой("Не верный параметр Канал");
	КонецЕсли;
	
	РезультатJSON = ЭкземплярКомпоненты.ПингКаналПотребителя(Сериализовать(Канал));
	
	Результат = "";
	Попытка
		Результат = Десериализовать(РезультатJSON);
	Исключение
	     Результат = СтруктураСОшибкой(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции

// Если исползуется этот метод, для явного указания с какого раздела читать и с каким смещением
// то не надо указывать топие в функции КонфигурацияПотребителя(Топик) 
// он все равно будет проигнорирован и будет использоваться более делаться настройка получения
// указанная через метод ДобавитьТопикРазделИСмещение.
// Указывать топик в функци  КонфигурацияПотребителя() есть смысл, если нужно подписаться на весь топик, со всеми разделами
// и когда не требудется указывать точно из какого раздела получать и начиная с какого смещения
Процедура ДобавитьТопикРазделИСмещение(Конфигурация, Топик, Раздел, Смещение) Экспорт
	Если НЕ Конфигурация.Свойство("СписокТопиковРазделовИСмещений") Тогда
		Конфигурация.Вставить("СписокТопиковРазделовИСмещений", Новый Массив());
	КонецЕсли;	
	Конфигурация.СписокТопиковРазделовИСмещений.Добавить(Новый Структура("Топик,Раздел,Смещение", Топик, Раздел, Смещение));
КонецПроцедуры

#КонецОбласти

#Область ОтправкаСообщений
Функция КонфигурацияОтправителя() Экспорт

	Конфигурация = Новый Структура("Настройки", Новый Массив );
	
	Возврат Конфигурация;
	
КонецФункции   

Функция СоздатьОтправителя(КонфигурацияОтправителя) Экспорт
	
	Если ЭкземплярКомпоненты = Неопределено Тогда
		Результат = ПодключитьКомпоненту();
		Если ЭтоОшибка(Результат) Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;	
	
	РезультатJSON = ЭкземплярКомпоненты.СоздатьПродюссера(Сериализовать(КонфигурацияОтправителя));	
	
	Результат = "";
	Попытка
		Результат = Десериализовать(РезультатJSON);
	Исключение
	     Результат = СтруктураСОшибкой(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция СоздатьСоообщение(Отправитель, Топик, ТелоСообщения, Ключ = "", Раздел = -1, Знач Заголовки = Неопределено, ТаймаутВСек = 10) Экспорт

	Если Заголовки = Неопределено Тогда
		Заголовки = Новый Массив;
	КонецЕсли;
	
	Сообщение= Новый Структура(
	"Продюссер, 
	|Значение, 
	|Топик, 
	|Ключ, 
	|Раздел, 
	|Таймаут, 
	|Заголовки", 
	Отправитель, 
	ТелоСообщения, 
	Топик, 
	Ключ, 
	Раздел, 
	ТаймаутВСек, 
	Заголовки);
	
	Возврат Сообщение;
	
КонецФункции

Функция ОтправитьСообщение(Сообщение) Экспорт
	
	Если ЭкземплярКомпоненты = Неопределено Тогда
		Результат = ПодключитьКомпоненту();
		Если ЭтоОшибка(Результат) Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;	
	
	РезультатJSON = ЭкземплярКомпоненты.ОтправитьСообщение(Сериализовать(Сообщение));	
	
	Результат = "";
	Попытка
		Результат = Десериализовать(РезультатJSON);
	Исключение
	     Результат = СтруктураСОшибкой(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция УдалитьОтправителя(Отправитель) Экспорт
	
	Если ЭкземплярКомпоненты = Неопределено Тогда
		Результат = ПодключитьКомпоненту();
		Если ЭтоОшибка(Результат) Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;	
	
	РезультатJSON = ЭкземплярКомпоненты.УдалитьПродюссера(Сериализовать(Отправитель));	
	
	Результат = "";
	Попытка
		Результат = Десериализовать(РезультатJSON);
	Исключение
	     Результат = СтруктураСОшибкой(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
КонецФункции
#КонецОбласти

#Область Типы
Функция Тип_Канал() Экспорт
	Возврат "Channel";		
КонецФункции

Функция Тип_Потребитель() Экспорт
	Возврат "Consumer";		
КонецФункции

Функция Тип_ИнформацияОСообщении() Экспорт
	Возврат "MessageInfo";		
КонецФункции

Функция Тип_СервисноеСообщение() Экспорт
	Возврат "ServiceMessage";		
КонецФункции

Функция Тип_Сообщение() Экспорт
	Возврат "Message";		
КонецФункции

Функция Тип_ПодтверждениеПолученногоСообщения() Экспорт
	Возврат "ConfirmMessage";		
КонецФункции

Функция Тип_Ошибка() Экспорт
	Возврат "Error";		
КонецФункции 

#КонецОбласти

#Область Общее
Процедура ДобавитьЗаголовокСообщения(Заголовки, Ключ, Значение) Экспорт
	Заголовки.Добавить(Новый Структура("Ключ,Значение", Ключ, Значение));		
КонецПроцедуры

Процедура ДобавитьНастройку(Конфигурация, КлючНастройки, ЗначениеНастройки) Экспорт
	Настройка = Новый Структура("Ключ,Значение",КлючНастройки, ЗначениеНастройки);
	Конфигурация.Настройки.Добавить(Настройка);
КонецПроцедуры

Функция ПодключитьКомпоненту()

	РезультатПроверки = ПроверитьВерсиюПлатформы();
	Если ЭтоОшибка(РезультатПроверки) Тогда
		ВызватьИсключение РезультатПроверки.Текст; // критичная ошибка, продолжать нельзя	
	КонецЕсли;
	
	СисИнфор = Новый СистемнаяИнформация;
	Если НЕ (СисИнфор.ТипПлатформы = ТипПлатформы.Windows_x86_64 ИЛИ СисИнфор.ТипПлатформы = ТипПлатформы.Linux_x86_64) Тогда
		Возврат СтруктураСОшибкой("Возможно подключить только на windows или linux и ТОЛЬКО на х64!");
	КонецЕсли;
	
	ОС = "windows";
	Если СисИнфор.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ОС = "linux";                                           
	КонецЕсли;
	
	РезультатПодключения = ПодключитьВнешнююКомпоненту("Обработка.КлиентKafka.Макет."+ОС, "Клиент", ТипВнешнейКомпоненты.Native); 
	
	ЭтоWindows = ОС = "windows";
	
	Если НЕ РезультатПодключения Тогда
		ДопКомментарий = "";
		Если ЭтоWindows Тогда
			ДопКомментарий = ". Возможно не установлено ""Microsoft Visual C++ Redistributable""";
		КонецЕсли;
		ДопКомментарий = ДопКомментарий + ". Доп. информация о причинах и решениях в справке обработки КлиентRMQ.";
		Возврат СтруктураСОшибкой(СтрШаблон("Ошибка подключения внешней компоненты%1", ДопКомментарий));
	КонецЕсли;
	
	ЭкземплярКомпоненты = Новый("AddIn.Клиент.KAFKA");
	
	РезультатПроверкиИмениИТокена = ПроверитьИмяИТокенДляКомпоненты("free", "d71a697cc86865ed63cc7d14952bdad6:193a66efdc38552a76618706992c3eba");
	
	Если РезультатПроверкиИмениИТокена <> "ok" Тогда
		Возврат СтруктураСОшибкой(РезультатПроверкиИмениИТокена);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьВерсиюПлатформы()
	
	СисИнфо = Новый СистемнаяИнформация;
	СоставВерсий = СтрРазделить(СисИнфо.ВерсияПриложения,"."); 
	
	ЭтоWindows = СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	ОснованяВерсия = Число(СоставВерсий[0]);
	МладшаяВерсия = Число(СоставВерсий[1]);
	Релиз = Число(СоставВерсий[2]);

	// Для windows поддерживается версия платформы начиная от 8.3.21 т.к. rust работат (!именно в win) только в изолированом режиме (в linux такой необходимости нет) 
	// В 8.3.21 появилась возможность выполнять внешние компоннеты в отдельном процессе (не в rphost)
	Если ЭтоWindows И НЕ (ОснованяВерсия = 8 И МладшаяВерсия = 3 И Релиз >= 21) Тогда
		Возврат СтруктураСОшибкой("В windows компонента может работать только в изолированном режиме, поэтому требуется версия платформы от 8.3.21 и выше. Или использовать linux (в linux нет ограничений на версию).");	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьИмяИТокенДляКомпоненты(Имя = "", Токен = "")
	Если ЗначениеЗаполнено(Имя) И ЗначениеЗаполнено(Токен) Тогда
		ДанныеДляПроверки = Новый Структура("ИмяПользователя,Токен", Имя, Токен);
		Возврат ЭкземплярКомпоненты.ПроверитьТокенЛицензииНаКомпоненту(Сериализовать(ДанныеДляПроверки));
	КонецЕсли;
КонецФункции

Функция ЭтоОшибка(Структура)  Экспорт
	Возврат ТипЗнч(Структура) = Тип("Структура") И Структура.Свойство("Тип") И Структура.Тип = Тип_Ошибка();
КонецФункции

Функция СтруктураСОшибкой(ТекстОшибки)
	Возврат Новый Структура("Тип,Текст",Тип_Ошибка(), ТекстОшибки);	
КонецФункции
#КонецОбласти

#Область Сериализация
Функция Сериализовать(Значение) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция Десериализовать(Строка) Экспорт
	
	Если НЕ ПустаяСтрока(Строка) И НЕ (СокрЛП(СтрНачинаетсяС(Строка,"{")) И СокрЛП(СтрЗаканчиваетсяНа(Строка,"}"))
		ИЛИ СокрЛП(СтрНачинаетсяС(Строка,"[")) И СокрЛП(СтрЗаканчиваетсяНа(Строка,"]"))
		) Тогда
		ВызватьИсключение СтрШаблон("Не верное значение json: %1", Строка);
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Структура = ПрочитатьJSON(ЧтениеJSON);  
	ЧтениеJSON.Закрыть();               
	
	Возврат Структура;
КонецФункции 
#КонецОбласти

